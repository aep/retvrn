package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"github.com/google/uuid"
	"iter"
	"retvrn/graph/model"
	"retvrn/kv/index/auto"
	"retvrn/kv/index/graph"
	"retvrn/kv/index/search"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	w := r.KV.Write()

	newID := uuid.New()

	auto.Put(w, newID, "Todo:ID", newID.String())
	auto.Put(w, newID, "Todo:Text", input.Text)

	userID := input.UserID

	//TODO check if the linked object even exists
	graph.Put1(w, newID, "Todo:User", userID)
	graph.PutN(w, userID, "User:Todos", newID)

	err := w.Commit(ctx)
	if err != nil {
		return nil, err
	}

	kr := r.KV.Read()

	rr := &model.Todo{}
	return rr, r.resolveModel(ctx, kr, newID, rr, nil)
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id uuid.UUID) (*model.Todo, error) {

	kw := r.KV.Write()

	var vv = &model.Todo{}
	err := r.resolveModel(ctx, kw, id, vv, nil)
	if err != nil {
		return nil, err
	}

	err = auto.Del(ctx, kw, id, "Todo:ID")
	if err != nil {
		return nil, err
	}

	err = auto.Del(ctx, kw, id, "Todo:Text")
	if err != nil {
		return nil, err
	}

	userId, err := graph.Get1(kw, ctx, id, "Todos:User")
	if err == nil {
		err = graph.DelN(kw, userId, "User:Todos", id)
		if err != nil {
			return nil, err
		}
	}

	err = graph.Del1(kw, id, "Todo:User")
	if err != nil {
		return nil, err
	}

	err = kw.Commit(ctx)
	if err != nil {
		return nil, err
	}

	return vv, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*model.User, error) {
	w := r.KV.Write()

	newID := uuid.New()

	auto.Put(w, newID, "User:ID", newID.String())
	auto.Put(w, newID, "User:Name", name)

	err := w.Commit(ctx)
	if err != nil {
		return nil, err
	}

	kr := r.KV.Read()

	rr := &model.User{}
	return rr, r.resolveModel(ctx, kr, newID, rr, nil)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	kw := r.KV.Write()

	var vv = &model.User{}
	err := r.resolveModel(ctx, kw, id, vv, nil)
	if err != nil {
		return nil, err
	}

	//deleting a user will delete all of their todos

	for id, err := range graph.GetN(kw, ctx, id, "User:Todos") {
		if err != nil {
			return nil, err
		}

		// this should have been in the same tx
		_, err := r.DeleteTodo(ctx, id)
		if err != nil {
			return nil, err
		}
	}

	err = auto.Del(ctx, kw, id, "User:ID")
	if err != nil {
		return nil, err
	}

	err = auto.Del(ctx, kw, id, "User:Name")
	if err != nil {
		return nil, err
	}

	err = kw.Commit(ctx)
	return vv, err
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, text *string) ([]*model.Todo, error) {
	kr := r.KV.Read()

	var rr = []*model.Todo{}

	var it iter.Seq2[uuid.UUID, error]
	if text != nil {
		it = search.Get(kr, ctx, "Todo:Text", *text)
	} else {
		it = search.Get(kr, ctx, "Todo:ID")
	}

	for i, err := range it {
		if err != nil {
			return nil, err
		}

		rrr := &model.Todo{}
		err := r.resolveModel(ctx, kr, i, rrr, nil)
		if err != nil {
			return nil, err
		}
		rr = append(rr, rrr)

	}

	return rr, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	kr := r.KV.Read()

	var rr = []*model.User{}

	var it iter.Seq2[uuid.UUID, error]
	it = search.Get(kr, ctx, "User:ID")

	for i, err := range it {
		if err != nil {
			return nil, err
		}

		rrr := &model.User{}
		err := r.resolveModel(ctx, kr, i, rrr, nil)
		if err != nil {
			return nil, err
		}
		rr = append(rr, rrr)

	}

	return rr, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
