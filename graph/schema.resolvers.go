package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"retvrn/graph/model"
	"retvrn/kv/index/column"
	"retvrn/kv/index/search"

	"github.com/google/uuid"
	"iter"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	w := r.KV.Write()

	newID := uuid.New()

	column.Set(w, newID, "Todo:ID", newID.String())
	search.Set(w, newID, "Todo:ID", newID.String())

	column.Set(w, newID, "Todo:Text", input.Text)
	search.Set(w, newID, "Todo:Text", input.Text)

	err := w.Commit(ctx)
	if err != nil {
		return nil, err
	}

	kr := r.KV.Read()

	rr := &model.Todo{}
	return rr, r.resolveModel(ctx, kr, newID, rr)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, text *string) ([]*model.Todo, error) {
	kr := r.KV.Read()

	var rr = []*model.Todo{}

	var it iter.Seq2[uuid.UUID, error]
	if text != nil {
		it = search.Get(kr, ctx, "Todo:Text", *text)
	} else {
		it = search.Get(kr, ctx, "Todo:ID")
	}

	for i, err := range it {
		if err != nil {
			return nil, err
		}

		rrr := &model.Todo{}
		err := r.resolveModel(ctx, kr, i, rrr)
		if err != nil {
			return nil, err
		}
		rr = append(rr, rrr)

	}

	return rr, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
